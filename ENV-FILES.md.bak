# Environment Variables Guide

## Two Separate Environment Files

This project uses **two different environment variable files**:

### 1. `.env.local` (Root Directory)
**Purpose**: Frontend environment variables for Next.js app

**Used by**:
- React components
- Client-side JavaScript
- Next.js API routes

**Access**:
- Variables must be prefixed with `NEXT_PUBLIC_` to be accessible in browser
- Example: `process.env.NEXT_PUBLIC_VERITAS_PROGRAM_ID`

**Example**:
```bash
# .env.local
NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
NEXT_PUBLIC_SOLANA_NETWORK=localnet
NEXT_PUBLIC_VERITAS_PROGRAM_ID=6njQqMDxSdMqXFpR25s6uZ4mQLEk6PDcBucsst5rAWNz
```

### 2. `supabase/.env.local` (Supabase Directory)
**Purpose**: Backend environment variables for Supabase Edge Functions

**Used by**:
- Edge Functions (serverless backend API)
- Deno runtime (not Node.js)

**Access**:
- No prefix required
- Accessed via `Deno.env.get('VARIABLE_NAME')`

**Example**:
```bash
# supabase/.env.local
SOLANA_PROGRAM_ID=6njQqMDxSdMqXFpR25s6uZ4mQLEk6PDcBucsst5rAWNz
SOLANA_RPC_ENDPOINT=http://host.docker.internal:8899
SOLANA_AUTHORITY_SECRET_KEY=[...]
```

## Why Two Files?

1. **Different runtimes**: Frontend runs in Node.js/Browser, Edge Functions run in Deno
2. **Different access patterns**: Frontend needs `NEXT_PUBLIC_` prefix, Edge Functions don't
3. **Security**: Edge Functions can use sensitive keys (service role) that shouldn't be in frontend

## Critical: Keep Them In Sync!

⚠️ **The `SOLANA_PROGRAM_ID` must match in both files!**

If they get out of sync, you'll see errors like:
- "Invalid public key input"
- Edge functions failing to deserialize on-chain accounts
- Buy transactions succeeding but sync failing

## Automated Sync

The `scripts/setup-local-test.sh` script automatically updates **both** files:

```bash
./scripts/setup-local-test.sh
```

This ensures:
1. `.env.local` gets `NEXT_PUBLIC_VERITAS_PROGRAM_ID`
2. `supabase/.env.local` gets `SOLANA_PROGRAM_ID`
3. Both have the same program ID value

## Manual Updates

If you manually change the program ID:

1. Update **both** files:
   ```bash
   # .env.local
   NEXT_PUBLIC_VERITAS_PROGRAM_ID=<new-program-id>

   # supabase/.env.local
   SOLANA_PROGRAM_ID=<new-program-id>
   ```

2. Restart Supabase to load new edge function env vars:
   ```bash
   npx supabase stop && npx supabase start
   ```

3. Restart Next.js dev server (if running):
   ```bash
   npm run dev
   ```

## Common Variables to Keep in Sync

| Concept | `.env.local` | `supabase/.env.local` |
|---------|--------------|----------------------|
| Program ID | `NEXT_PUBLIC_VERITAS_PROGRAM_ID` | `SOLANA_PROGRAM_ID` |
| RPC Endpoint | `NEXT_PUBLIC_SOLANA_RPC_ENDPOINT` | `SOLANA_RPC_ENDPOINT` |
| USDC Mint | `NEXT_PUBLIC_USDC_MINT_LOCALNET` | _(fetched from config)_ |

## Troubleshooting

**Problem**: Edge functions return "Invalid public key input"

**Solution**:
1. Check both env files have matching program IDs
2. Restart Supabase: `npx supabase stop && npx supabase start`

**Problem**: Frontend shows wrong program ID

**Solution**:
1. Check `.env.local` has correct `NEXT_PUBLIC_VERITAS_PROGRAM_ID`
2. Restart Next.js: `npm run dev`

**Problem**: Changes to `supabase/.env.local` not taking effect

**Solution**:
1. Edge functions cache environment variables
2. Must restart Supabase: `npx supabase stop && npx supabase start`

## Best Practices

1. ✅ **Always use the setup script** for deployments
2. ✅ **Check both files** if you see env-related errors
3. ✅ **Restart services** after manual env changes
4. ❌ **Never commit secrets** to `.env.local` files (use `.env.example`)
5. ❌ **Don't assume** env changes take effect immediately

## Related Files

- `scripts/setup-local-test.sh` - Updates both env files automatically
- `.gitignore` - Excludes both `.env.local` files from git
- `supabase/config.toml` - Supabase configuration (doesn't use env vars directly)

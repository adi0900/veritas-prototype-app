#!/bin/bash

# Setup Local Testing Environment for Veritas
# Usage: ./scripts/setup-local-test.sh [WALLET_ADDRESS]

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🚀 Veritas Local Testing Environment Setup${NC}"
echo ""

# Get wallet address from argument or use default keypair
if [ -n "$1" ]; then
    WALLET_ADDRESS="$1"
    echo -e "${GREEN}✅ Using provided wallet address for airdrop: $WALLET_ADDRESS${NC}"
    AIRDROP_TO_PRIVY=true
else
    # Check if default keypair exists
    if [ ! -f ~/.config/solana/id.json ]; then
        echo -e "${YELLOW}🔑 Creating new Solana keypair...${NC}"
        solana-keygen new --no-bip39-passphrase
    fi
    WALLET_ADDRESS=$(solana address)
    echo -e "${GREEN}✅ Using default wallet: $WALLET_ADDRESS${NC}"
    AIRDROP_TO_PRIVY=false
fi

# Kill any existing validators
echo -e "${YELLOW}🧹 Cleaning up existing validators...${NC}"
pkill -9 solana-test-validator 2>/dev/null || true
sleep 2

# Clean test-ledger to avoid macOS genesis issues
rm -rf test-ledger 2>/dev/null || true

# Set Solana to localhost
echo -e "${YELLOW}📡 Configuring Solana for localhost...${NC}"
solana config set --url http://localhost:8899 > /dev/null

# Navigate to Solana project
cd "$(dirname "$0")/../solana/veritas-curation"

# Start validator using Anchor (avoids genesis issues)
echo -e "${YELLOW}🔧 Starting Anchor localnet...${NC}"
export PATH="$HOME/.local/share/solana/install/releases/stable-342b9503bea8248c9ab3facc1fe40624d0e79ed5/solana-release/bin:$PATH"

# Start validator in background
solana-test-validator \
  --ledger test-ledger \
  --rpc-port 8899 \
  --quiet \
  --reset &

VALIDATOR_PID=$!
echo -e "${GREEN}✅ Validator started (PID: $VALIDATOR_PID)${NC}"

# Wait for validator to be ready
echo -e "${YELLOW}⏳ Waiting for validator to be ready...${NC}"
sleep 5

# Check if validator is running
if ! solana cluster-version &>/dev/null; then
    echo -e "${RED}❌ Validator failed to start${NC}"
    exit 1
fi

echo -e "${GREEN}✅ Validator is ready!${NC}"

# Airdrop SOL to the wallet
echo -e "${YELLOW}💰 Airdropping 100 SOL to $WALLET_ADDRESS...${NC}"
solana airdrop 100 "$WALLET_ADDRESS" || echo "Airdrop may have failed, checking balance..."
sleep 2

BALANCE=$(solana balance "$WALLET_ADDRESS" 2>/dev/null || echo "0 SOL")
echo -e "${GREEN}✅ Wallet balance: $BALANCE${NC}"

# Build and deploy contracts
echo -e "${YELLOW}🔨 Building Anchor project...${NC}"
anchor build

echo -e "${YELLOW}📦 Deploying contracts...${NC}"
anchor deploy

# Get program ID
PROGRAM_ID=$(solana address -k target/deploy/veritas_curation-keypair.json)
echo -e "${GREEN}✅ Program deployed!${NC}"
echo -e "${GREEN}   Program ID: $PROGRAM_ID${NC}"

# Update .env.local
cd ../..
echo -e "${YELLOW}⚙️  Updating .env.local...${NC}"

# Backup existing .env.local
if [ -f .env.local ]; then
    cp .env.local .env.local.backup
fi

# Update or add Solana config
if grep -q "NEXT_PUBLIC_SOLANA_NETWORK" .env.local 2>/dev/null; then
    # Update existing
    if [[ "$OSTYPE" == "darwin"* ]]; then
        sed -i '' "s|NEXT_PUBLIC_SOLANA_NETWORK=.*|NEXT_PUBLIC_SOLANA_NETWORK=localnet|" .env.local
        sed -i '' "s|NEXT_PUBLIC_SOLANA_RPC_ENDPOINT=.*|NEXT_PUBLIC_SOLANA_RPC_ENDPOINT=http://127.0.0.1:8899|" .env.local
        sed -i '' "s|NEXT_PUBLIC_VERITAS_PROGRAM_ID=.*|NEXT_PUBLIC_VERITAS_PROGRAM_ID=$PROGRAM_ID|" .env.local
    else
        sed -i "s|NEXT_PUBLIC_SOLANA_NETWORK=.*|NEXT_PUBLIC_SOLANA_NETWORK=localnet|" .env.local
        sed -i "s|NEXT_PUBLIC_SOLANA_RPC_ENDPOINT=.*|NEXT_PUBLIC_SOLANA_RPC_ENDPOINT=http://127.0.0.1:8899|" .env.local
        sed -i "s|NEXT_PUBLIC_VERITAS_PROGRAM_ID=.*|NEXT_PUBLIC_VERITAS_PROGRAM_ID=$PROGRAM_ID|" .env.local
    fi
else
    # Add new
    cat >> .env.local << EOF

# Local Solana Testing (auto-generated by setup-local-test.sh)
NEXT_PUBLIC_SOLANA_NETWORK=localnet
NEXT_PUBLIC_SOLANA_RPC_ENDPOINT=http://127.0.0.1:8899
NEXT_PUBLIC_VERITAS_PROGRAM_ID=$PROGRAM_ID
EOF
fi

echo -e "${GREEN}✅ Environment configured!${NC}"
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ Setup Complete!${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${YELLOW}Your Test Wallet:${NC}"
echo -e "   Address: ${GREEN}$WALLET_ADDRESS${NC}"
echo -e "   Balance: ${GREEN}$BALANCE${NC}"
echo ""
echo -e "${YELLOW}Solana Localnet:${NC}"
echo -e "   RPC: ${GREEN}http://127.0.0.1:8899${NC}"
echo -e "   Program ID: ${GREEN}$PROGRAM_ID${NC}"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo -e "   1. Make sure Supabase is running: ${BLUE}npx supabase status${NC}"
echo -e "   2. Start Next.js dev server: ${BLUE}npm run dev${NC}"
if [ "$AIRDROP_TO_PRIVY" = true ]; then
echo -e "   3. Login with Privy - your wallet ${GREEN}$WALLET_ADDRESS${NC} is funded!"
else
echo -e "   3. Login with Privy, copy your Solana wallet address, then run:"
echo -e "      ${BLUE}./scripts/setup-local-test.sh YOUR_WALLET_ADDRESS${NC}"
fi
echo -e "   4. Create a test post to verify end-to-end flow!"
echo ""
echo -e "${YELLOW}To stop the validator:${NC}"
echo -e "   ${BLUE}kill $VALIDATOR_PID${NC}"
echo -e "   or"
echo -e "   ${BLUE}pkill solana-test-validator${NC}"
echo ""
echo -e "${YELLOW}To view validator logs:${NC}"
echo -e "   ${BLUE}solana logs${NC}"
echo ""

'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { supabase } from '@/lib/supabase';

interface User {
  id: string;
  username: string;
  display_name: string;
  agent_id: string;
  total_stake: number;
  beliefs_created: number;
  beliefs_participated: number;
  created_at: string;
}

interface OpinionPost {
  id: string;
  title: string;
  content: string;
  media_urls: string[];
  opinion_belief_id: string | null;
  user_id: string;
  created_at: string;
  user: {
    username: string;
    display_name: string;
  };
  belief?: {
    belief_id: string;
    previous_aggregate: number;
    expiration_epoch: number;
    status: string;
    creator_agent_id: string;
  };
  submissions?: Array<{
    submission_id: string;
    user: {
      id: string;
      username: string;
      display_name: string;
    };
    agent_id: string;
    belief: number;
    meta_prediction: number;
    epoch: number;
    is_active: boolean;
    stake_allocated: number;
    created_at: string;
    updated_at: string;
  }>;
}

interface DashboardUser {
  user_id: string;
  username: string;
  display_name: string;
  avatar_url: string | null;
  agent_id: string;
  total_stake: number;
  active_belief_count: number;
  belief_participations: Array<{
    submission_id: string;
    belief_id: string;
    belief_value: number;
    meta_prediction: number;
    stake_allocated: number;
    is_active: boolean;
    created_at: string;
    updated_at: string;
    belief_info: {
      creator_agent_id: string;
      created_epoch: number;
      expiration_epoch: number;
      current_aggregate: number;
      status: string;
    };
    post_context?: {
      post_id: string;
      title: string;
      content_preview: string;
      created_at: string;
      post_type: 'opinion';
    } | null;
  }>;
}

export default function DashboardPage() {
  const [currentEpoch, setCurrentEpoch] = useState(0);
  const [epochInterval, setEpochInterval] = useState(30);
  const [isEpochRunning, setIsEpochRunning] = useState(false);
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [users, setUsers] = useState<User[]>([]);
  const [opinionPosts, setOpinionPosts] = useState<OpinionPost[]>([]);
  const [dashboardUsers, setDashboardUsers] = useState<DashboardUser[]>([]);
  const [activeTab, setActiveTab] = useState<'posts' | 'users'>('posts');
  const [logs, setLogs] = useState<string[]>([]);

  useEffect(() => {
    loadData();

    // Load previously selected user from localStorage
    const savedUserId = localStorage.getItem('selectedUserId');
    if (savedUserId) {
      setSelectedUserId(savedUserId);
    }
  }, []);

  const loadData = async () => {
    try {
      addLog('Loading dashboard data...');

      // Load users from database
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select('*')
        .order('created_at', { ascending: false });

      if (usersError) {
        addLog(`Error loading users: ${usersError.message}`);
      } else {
        setUsers(usersData || []);
        addLog(`Loaded ${usersData?.length || 0} users`);
      }

      // Load system config (current epoch)
      const { data: configData, error: configError } = await supabase
        .from('system_config')
        .select('*')
        .eq('key', 'current_epoch')
        .single();

      if (configError && configError.code !== 'PGRST116') {
        addLog(`Error loading epoch: ${configError.message}`);
      } else if (configData) {
        setCurrentEpoch(parseInt(configData.value));
      }

      // Load posts and users
      await loadPosts();
      await loadDashboardUsers();

    } catch (error) {
      addLog(`Error loading data: ${error}`);
    }
  };

  const loadPosts = async () => {
    try {
      addLog('Loading posts...');

      // MODULAR USER SELECTION: Use selected user for feed
      // When auth is implemented, replace selectedUserId with authenticated user ID
      // Currently all users see the same posts regardless of selectedUserId
      const userIdForFeed = selectedUserId || 'default-user'; // Fallback for API requirement

      const response = await fetch('http://127.0.0.1:54321/functions/v1/dashboard-posts-get-feed', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: userIdForFeed,
          limit: 20,
          offset: 0
        })
      });

      const data = await response.json();

      if (response.ok) {
        setOpinionPosts(data.posts || []);
        addLog(`✅ Loaded ${data.posts?.length || 0} posts (${data.total_count} total)`);
      } else {
        addLog(`❌ Failed to load posts: ${data.error || 'Unknown error'}`);
        setOpinionPosts([]);
      }
    } catch (error) {
      addLog(`❌ Error loading posts: ${error}`);
      setOpinionPosts([]);
    }
  };

  const loadDashboardUsers = async () => {
    try {
      addLog('Loading dashboard users...');

      const response = await fetch('http://127.0.0.1:54321/functions/v1/app-dashboard-users-get-activity', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          limit: 20,
          offset: 0
        })
      });

      const data = await response.json();

      if (response.ok) {
        setDashboardUsers(data.users || []);
        addLog(`✅ Loaded ${data.users?.length || 0} users (${data.total_count} total)`);
      } else {
        addLog(`❌ Failed to load users: ${data.error || 'Unknown error'}`);
        setDashboardUsers([]);
      }
    } catch (error) {
      addLog(`❌ Error loading users: ${error}`);
      setDashboardUsers([]);
    }
  };

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [`[${timestamp}] ${message}`, ...prev.slice(0, 49)]);
  };

  const [showCreateUserForm, setShowCreateUserForm] = useState(false);
  const [newUsername, setNewUsername] = useState('');

  const createUser = async () => {
    if (!newUsername.trim()) return;

    try {
      addLog(`Creating user: ${newUsername}`);

      const response = await fetch('http://127.0.0.1:54321/functions/v1/app-user-creation', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: newUsername.trim(),
          display_name: newUsername.trim()
        })
      });

      const data = await response.json();

      if (response.ok) {
        addLog(`✅ User created: ${data.user.username} (ID: ${data.user_id.slice(0, 8)}...)`);
        setNewUsername('');
        setShowCreateUserForm(false);
        loadData(); // Reload users
      } else {
        addLog(`❌ Failed to create user: ${data.error || 'Unknown error'}`);
      }
    } catch (error) {
      addLog(`❌ Error creating user: ${error}`);
    }
  };

  const submitBelief = async (postId: string) => {
    if (!selectedUserId) {
      alert('Select a user first');
      return;
    }

    const beliefStr = prompt('Your belief (0-1):');
    const metaStr = prompt('Meta-prediction (0-1):');

    if (!beliefStr || !metaStr) return;

    const beliefValue = parseFloat(beliefStr);
    const metaPrediction = parseFloat(metaStr);

    if (isNaN(beliefValue) || beliefValue < 0 || beliefValue > 1) {
      alert('Belief must be a number between 0 and 1');
      return;
    }

    if (isNaN(metaPrediction) || metaPrediction < 0 || metaPrediction > 1) {
      alert('Meta-prediction must be a number between 0 and 1');
      return;
    }

    // Find the post and get its opinion_belief_id
    const post = opinionPosts.find(p => p.id === postId);
    if (!post || !post.opinion_belief_id) {
      alert('Post not found or not an opinion post');
      return;
    }

    // Find the selected user's agent_id
    const selectedUser = users.find(u => u.id === selectedUserId);
    if (!selectedUser) {
      alert('Selected user not found');
      return;
    }

    try {
      addLog(`Submitting belief to post ${postId.slice(0, 8)}...`);

      const response = await fetch('http://127.0.0.1:54321/functions/v1/protocol-beliefs-submit', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          agent_id: selectedUser.agent_id,
          belief_id: post.opinion_belief_id,
          belief_value: beliefValue,
          meta_prediction: metaPrediction
        })
      });

      const data = await response.json();

      if (response.ok) {
        addLog(`✅ Belief submitted successfully! (${data.is_first_submission ? 'New' : 'Updated'} submission)`);
        // Reload posts to show the new submission
        await loadPosts();
      } else {
        addLog(`❌ Failed to submit belief: ${data.error || 'Unknown error'}`);
      }
    } catch (error) {
      addLog(`❌ Error submitting belief: ${error}`);
    }
  };

  const processEpoch = async () => {
    addLog(`Processing epoch ${currentEpoch}...`);
    // TODO: Call /api/protocol/epochs/process-all
  };

  const toggleEpochProcessing = () => {
    setIsEpochRunning(!isEpochRunning);
    addLog(isEpochRunning ? 'Stopped epoch processing' : `Started epoch processing (${epochInterval}s intervals)`);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <h1 className="text-3xl font-bold">Protocol Dashboard</h1>
          <div className="flex">
            <button
              onClick={() => setActiveTab('posts')}
              className={`px-4 py-2 text-sm font-medium rounded-l-lg border ${
                activeTab === 'posts'
                  ? 'bg-blue-500 text-white border-blue-500'
                  : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
              }`}
            >
              Posts
            </button>
            <button
              onClick={() => setActiveTab('users')}
              className={`px-4 py-2 text-sm font-medium rounded-r-lg border-t border-r border-b ${
                activeTab === 'users'
                  ? 'bg-blue-500 text-white border-blue-500'
                  : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
              }`}
            >
              Users
            </button>
          </div>
        </div>
        <div className="flex items-center gap-4">
          <Badge variant="outline">Epoch {currentEpoch}</Badge>
          <Badge variant="outline">{epochInterval}s intervals</Badge>
        </div>
      </div>

      {/* User Management */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>User Management</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Active User</label>
              <select
                value={selectedUserId}
                onChange={(e) => {
                  const newUserId = e.target.value;
                  setSelectedUserId(newUserId);
                  // Save to localStorage so sidebar can access the selected user
                  if (newUserId) {
                    localStorage.setItem('selectedUserId', newUserId);
                  } else {
                    localStorage.removeItem('selectedUserId');
                  }
                }}
                className="w-full p-2 border rounded-md bg-neutral-100 dark:bg-neutral-700 text-black dark:text-white"
              >
                <option value="">Select user...</option>
                {users.map(user => (
                  <option key={user.id} value={user.id}>
                    {user.display_name} (@{user.username}) - ${user.total_stake} stake
                  </option>
                ))}
              </select>
            </div>

            {!showCreateUserForm ? (
              <div className="flex gap-2">
                <Button onClick={() => setShowCreateUserForm(true)} variant="outline" className="flex-1">
                  Create New User
                </Button>
                <Button onClick={loadData} variant="outline" size="sm">
                  🔄
                </Button>
              </div>
            ) : (
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium mb-1">New Username</label>
                  <input
                    type="text"
                    value={newUsername}
                    onChange={(e) => setNewUsername(e.target.value)}
                    placeholder="Enter username"
                    className="w-full p-2 border rounded-md bg-neutral-100 dark:bg-neutral-700 text-black dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onKeyDown={(e) => e.key === 'Enter' && createUser()}
                  />
                </div>
                <div className="flex gap-2">
                  <Button
                    onClick={() => {
                      setShowCreateUserForm(false);
                      setNewUsername('');
                    }}
                    variant="outline"
                    className="flex-1"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={createUser}
                    disabled={!newUsername.trim()}
                    className="flex-1"
                  >
                    Create
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Epoch Controls</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-2">
              <Button
                onClick={toggleEpochProcessing}
                variant={isEpochRunning ? "destructive" : "outline"}
                className="flex-1"
              >
                {isEpochRunning ? 'Stop Cron' : 'Start Cron'}
              </Button>
            </div>

            <div className="flex items-center gap-2">
              <label className="text-sm">Interval (seconds):</label>
              <input
                type="number"
                value={epochInterval}
                onChange={(e) => setEpochInterval(parseInt(e.target.value))}
                className="w-20 p-1 border rounded text-center bg-neutral-100 dark:bg-neutral-700 text-black dark:text-white"
                min="5"
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Content Tabs */}
      {activeTab === 'posts' && (
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Opinion Posts ({opinionPosts.length})</CardTitle>
              <Button onClick={loadPosts} variant="outline" size="sm">
                🔄 Reload
              </Button>
            </div>
          </CardHeader>
          <CardContent>
          {opinionPosts.length === 0 ? (
            <p className="text-muted-foreground">No opinion posts yet. Create one to start testing.</p>
          ) : (
            <div className="space-y-3">
              {opinionPosts.map(post => (
                <div key={post.id} className="p-4 border rounded-lg">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h3 className="font-semibold">{post.title || 'Untitled'}</h3>
                      <p className="text-sm text-muted-foreground">by @{post.user.username}</p>
                    </div>
                    {post.opinion_belief_id && (
                      <Button
                        onClick={() => submitBelief(post.id)}
                        disabled={!selectedUserId}
                        variant="outline"
                        size="sm"
                      >
                        Submit Belief
                      </Button>
                    )}
                  </div>
                  {post.content && <p className="text-sm mb-2">{post.content}</p>}

                  {post.opinion_belief_id ? (
                    <div className="mt-3 space-y-3">
                      <div className="p-2 bg-muted rounded">
                        <div className="flex items-center justify-between">
                          <p className="text-xs font-mono text-muted-foreground">
                            Market: {post.opinion_belief_id.slice(0, 12)}...
                          </p>
                          {post.belief && (
                            <div className="flex gap-3 text-xs text-muted-foreground">
                              <span>Aggregate: {(post.belief.previous_aggregate * 100).toFixed(1)}%</span>
                              <span>Status: {post.belief.status}</span>
                              <span>Expires: Epoch {post.belief.expiration_epoch}</span>
                            </div>
                          )}
                        </div>
                      </div>

                      {post.submissions && post.submissions.length > 0 && (
                        <div className="p-2 bg-muted/50 rounded">
                          <h4 className="text-xs font-semibold mb-2 text-muted-foreground">
                            Submissions ({post.submissions.length})
                          </h4>
                          <div className="space-y-2">
                            {post.submissions.map(submission => (
                              <div key={submission.submission_id} className="flex items-center justify-between text-xs">
                                <div className="flex items-center gap-2">
                                  <span className="font-medium">@{submission.user.username}</span>
                                  <span className="text-muted-foreground">
                                    believes {(submission.belief * 100).toFixed(1)}%
                                  </span>
                                  <span className="text-muted-foreground">
                                    (meta: {(submission.meta_prediction * 100).toFixed(1)}%)
                                  </span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <span className="text-muted-foreground">
                                    ${submission.stake_allocated.toFixed(1)} stake
                                  </span>
                                  {submission.is_active ? (
                                    <span className="px-1.5 py-0.5 bg-green-100 text-green-800 rounded text-xs">Active</span>
                                  ) : (
                                    <span className="px-1.5 py-0.5 bg-gray-100 text-gray-600 rounded text-xs">Inactive</span>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <p className="text-xs text-muted-foreground italic">Regular post (no belief market)</p>
                  )}

                  <p className="text-xs text-muted-foreground mt-2">
                    {new Date(post.created_at).toLocaleDateString()} at {new Date(post.created_at).toLocaleTimeString()}
                  </p>
                </div>
              ))}
            </div>
          )}
          </CardContent>
        </Card>
      )}

      {activeTab === 'users' && (
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <CardTitle>Users ({dashboardUsers.length})</CardTitle>
              <Button onClick={loadDashboardUsers} variant="outline" size="sm">
                🔄 Reload
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            {dashboardUsers.length === 0 ? (
              <p className="text-muted-foreground">No users found. Create some users to start testing.</p>
            ) : (
              <div className="space-y-4">
                {dashboardUsers.map(user => (
                  <div key={user.user_id} className="p-4 border rounded-lg">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <h3 className="font-semibold text-lg">{user.display_name}</h3>
                        <p className="text-sm text-muted-foreground">@{user.username}</p>
                        <p className="text-xs text-muted-foreground font-mono">Agent: {user.agent_id.slice(0, 12)}...</p>
                      </div>
                      <div className="text-right">
                        <p className="text-sm font-medium">${user.total_stake} total stake</p>
                        <p className="text-xs text-muted-foreground">{user.active_belief_count} active beliefs</p>
                        <p className="text-xs text-muted-foreground">
                          ~${user.active_belief_count > 0 ? (user.total_stake / user.active_belief_count).toFixed(1) : '0'} per belief
                        </p>
                      </div>
                    </div>

                    {user.belief_participations.length > 0 ? (
                      <div className="space-y-2">
                        <h4 className="text-sm font-semibold text-muted-foreground">
                          Belief Participations ({user.belief_participations.length})
                        </h4>
                        <div className="space-y-2">
                          {user.belief_participations.map(participation => (
                            <div key={participation.submission_id} className="p-3 bg-muted/50 rounded border-l-4 border-blue-200">
                              <div className="flex justify-between items-start mb-2">
                                <div className="flex-1">
                                  {participation.post_context ? (
                                    <div>
                                      <p className="font-medium text-sm">{participation.post_context.title}</p>
                                      <p className="text-xs text-muted-foreground">Opinion Post</p>
                                      {participation.post_context.content_preview && (
                                        <p className="text-xs text-muted-foreground mt-1 italic">
                                          "{participation.post_context.content_preview}..."
                                        </p>
                                      )}
                                    </div>
                                  ) : (
                                    <div>
                                      <p className="font-medium text-sm">Protocol Belief</p>
                                      <p className="text-xs text-muted-foreground">Standalone belief market</p>
                                      <p className="text-xs text-muted-foreground font-mono">
                                        {participation.belief_id.slice(0, 20)}...
                                      </p>
                                    </div>
                                  )}
                                </div>
                                <div className="text-right ml-4">
                                  <p className="text-sm font-medium">
                                    {(participation.belief_value * 100).toFixed(1)}% belief
                                  </p>
                                  <p className="text-xs text-muted-foreground">
                                    ${participation.stake_allocated.toFixed(1)} stake
                                  </p>
                                </div>
                              </div>
                              <div className="flex justify-between items-center text-xs text-muted-foreground">
                                <div className="flex gap-3">
                                  <span>Meta: {(participation.meta_prediction * 100).toFixed(1)}%</span>
                                  <span>Market: {(participation.belief_info.current_aggregate * 100).toFixed(1)}%</span>
                                  <span>Status: {participation.belief_info.status}</span>
                                </div>
                                <div className="flex items-center gap-1">
                                  {participation.is_active ? (
                                    <span className="px-2 py-0.5 bg-green-100 text-green-800 rounded-full">Active</span>
                                  ) : (
                                    <span className="px-2 py-0.5 bg-gray-100 text-gray-600 rounded-full">Inactive</span>
                                  )}
                                  <span>Exp: E{participation.belief_info.expiration_epoch}</span>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground italic">No belief participations yet</p>
                    )}
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Activity Log */}
      <Card>
        <CardHeader>
          <CardTitle>Activity Log</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="font-mono text-xs space-y-1 max-h-64 overflow-y-auto">
            {logs.length === 0 ? (
              <p className="text-muted-foreground">No activity yet</p>
            ) : (
              logs.map((log, i) => (
                <div key={i} className="text-muted-foreground">
                  {log}
                </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}